#+babel: :tangle chef-vault-test.sh
#+PROPERTY: header-args:sh+ :tangle yes
#+PROPERTY: header-args:sh+ :dir (file-relative-name (file-name-sans-extension buffer-file-name))
#+PROPERTY: header-args:sh+ :var repo=(file-relative-name (file-name-sans-extension buffer-file-name))
#+PROPERTY: header-args:sh+ :results output silent

https://github.com/chef/chef-vault/blob/master/THEORY.md

* org-mode preable

#+BEGIN_src sh :shebang "#!/bin/bash"
# mkdir -p chef-vault-test
rm -rf $repo
#+end_src

#+RESULTS:

* Check my chef version on my workstation/mbp

#+BEGIN_src sh :results output
chef -v &
#+end_src

#+RESULTS:
: Chef Development Kit Version: 0.14.25
: chef-client version: 12.10.24
: berks version: 4.3.3
: kitchen version: 1.8.0

* Generate chef cookbook repository

#+BEGIN_src sh
chef generate repo $repo >/dev/null
cd $repo
#+end_src

* Generate chef cookbook

#+BEGIN_src sh
chef generate cookbook --email taylor.monacelli@streambox.com cookbooks/test >/dev/null
#+end_src

#+RESULTS:

* Clean out previous test run clients, nodes, vaults from chef server

#+BEGIN_src sh
knife data bag list | grep mydatabag | gxargs -r -n1 knife data bag delete --yes
knife client list | grep taytestnode | gxargs -r -n1 knife client delete --yes
knife client list
knife vault list | grep credentials | gxargs -r -n1 knife data bag delete --yes
knife vault list --mode client
knife node list | grep taytestnode | gxargs -r -n1 knife node delete --yes
#+end_src

* Use knife to create new test node taytestnode on chef server

#+BEGIN_src sh
knife node create taytestnode --disable-editing --yes
knife node list
knife client create taytestnode --file taytestnode.key --disable-editing --yes
#+end_src

https://docs.chef.io/knife_client.html
#+BEGIN_src sh
knife client key show taytestnode default
knife vault list --mode client
#+end_src

* TODO Prove that user our user mtm1 has a RSA public key on chef server

Why do we care about an RSA key?

#+BEGIN_src sh
knife user list
knife user key list mtm1
knife user key show mtm1 default
#+end_src

* Delete my preexisting test vault to ensure I'm starting clean

#+BEGIN_src sh
knife vault list | grep credentials | gxargs -r -n1 knife data bag delete --yes
#+end_src

* Create new vault

#+BEGIN_src sh
knife vault create credentials database --search "name:taytestnode" --json ./database.json
#+end_src

* Create a data bag

#+BEGIN_src sh
pass=$(mkpasswd -m sha-512 mypass)
cat <<__EOT__ >database.json
{
	"db_password": "$pass"
}
__EOT__
#+end_src

* TODO Upload data bag

Huh?  Why do we do this here?

#+BEGIN_src sh
knife upload data_bags
#+end_src

#+RESULTS:
| Updated | data_bags/credentials/database.json      |
| Updated | data_bags/credentials/database_keys.json |

* TODO knife data bag show credentials database_keys

How can we use knife vault instead of knife data bag to show which
clients/users can decrypt?

#+BEGIN_src sh :results output
knife data bag show credentials
knife data bag show credentials database_keys
knife data bag show credentials database_keys --format json
knife vault show credentials database --format json
knife vault show credentials database --format json --mode client
#+end_src

#+RESULTS:
#+begin_example
database
database_keys
admins:       mtm1
clients:      taytestnode
id:           database_keys
mtm1:         GZ5PEfH6iHQ6+vZKhzoepHjDceIqPpbk/Bq2ksSjytnhkoJF/nWrRrUmJ3NE
8xD8xgTBYKaKlDZlbFKVnIhuV8AcZ1pcahHcy8PBBJa/R6pFThQUHpCuWYxa
4FiiaP0zgy/loNsic4lc1gwvPmXg9Nmri9MojzQQMxznFtZA8GaRkOfqjsZa
AUvu2I1owq3+OM1knVRe3sKCtzWwbpOsT9hgik62Jgse2kVNDMNGMCldl001
a8CcCufOYUIvVkwaarIXXzyhkt5F5C2cHBISB/VmiM8EemBiFt+homVMe0MC
vuteBd/pg+Cs8ug8ms0e0bqXz3dmwtS+ukfDyEqgWQ==

search_query: name:taytestnode
taytestnode:  NZyBmnI8PsmJHlFjdx6km+CMDuRSltXXy0k+t7dcE8zmjuX9qqHGW33ePt7b
FcU/Jwh7uT4VnVqq7AiyTFEVyKEQj69EExMfS0TUGzW1YBpXYfI/OWTIYoo/
8Gi060s/GRErhFs5DFe0rHMjYTUi2cMRKF1QzQXrMISFCRJmM9X49nVsoizE
DmMtInPpad1QA9GSnz8txiHIXrWgu4wAzKSXTJBcHUkrM4YN01+AEin5rpoi
JabbcpBhBDSZ63oRPy9tWakbTreMe9K8XkwyjCZw/YpBeGQTVo6wUiRzlv+X
M9YOfrX7+sh/h+vzBSS4Q6f5djbFJD6VS0YJSL79Ew==

{
  "id": "database_keys",
  "admins": [
    "mtm1"
  ],
  "clients": [
    "taytestnode"
  ],
  "search_query": "name:taytestnode",
  "taytestnode": "NZyBmnI8PsmJHlFjdx6km+CMDuRSltXXy0k+t7dcE8zmjuX9qqHGW33ePt7b\nFcU/Jwh7uT4VnVqq7AiyTFEVyKEQj69EExMfS0TUGzW1YBpXYfI/OWTIYoo/\n8Gi060s/GRErhFs5DFe0rHMjYTUi2cMRKF1QzQXrMISFCRJmM9X49nVsoizE\nDmMtInPpad1QA9GSnz8txiHIXrWgu4wAzKSXTJBcHUkrM4YN01+AEin5rpoi\nJabbcpBhBDSZ63oRPy9tWakbTreMe9K8XkwyjCZw/YpBeGQTVo6wUiRzlv+X\nM9YOfrX7+sh/h+vzBSS4Q6f5djbFJD6VS0YJSL79Ew==\n",
  "mtm1": "GZ5PEfH6iHQ6+vZKhzoepHjDceIqPpbk/Bq2ksSjytnhkoJF/nWrRrUmJ3NE\n8xD8xgTBYKaKlDZlbFKVnIhuV8AcZ1pcahHcy8PBBJa/R6pFThQUHpCuWYxa\n4FiiaP0zgy/loNsic4lc1gwvPmXg9Nmri9MojzQQMxznFtZA8GaRkOfqjsZa\nAUvu2I1owq3+OM1knVRe3sKCtzWwbpOsT9hgik62Jgse2kVNDMNGMCldl001\na8CcCufOYUIvVkwaarIXXzyhkt5F5C2cHBISB/VmiM8EemBiFt+homVMe0MC\nvuteBd/pg+Cs8ug8ms0e0bqXz3dmwtS+ukfDyEqgWQ==\n"
}
{
  "id": "database",
  "db_password": "$6$XbnUHBxiztbyNv.s$dNILpEApvAJtDPOXud5CTC.2R8X1skXEYErXucXFAsIPGnvMEE7jiInW//thWfLzTsVn.lDog3//CwUK.TQua1"
}
#+end_example

* knife vault show credentials database --format json

#+BEGIN_src sh :results output
knife data bag show --format json credentials database
knife vault show credentials database --format json
knife vault show credentials database --format json --mode client # requires that you did 'knife upload data_bags'
#+end_src

#+RESULTS:
#+begin_example
{
  "id": "database",
  "db_password": {
    "encrypted_data": "mmvo/XDzhVeKf5J2sQr/XtgkcjNqtJsNvuyy6PX4MFmmF27a/N7ZCXv0MZrq\nX3PFy+nfYRrLsu2dyAdLSk6JCVrzPbvBW0Ddb9b00eYh8WOTW9/x444EeCaP\ncMlLdF4LYJKmqBD3dzs2aZ0ADJvMPH4Wpbh46qpleFuJsX8cFyY=\n",
    "iv": "j87GVTg0s/zQkiXHy4Deeg==\n",
    "version": 1,
    "cipher": "aes-256-cbc"
  }
}
{
  "id": "database",
  "db_password": "$6$XbnUHBxiztbyNv.s$dNILpEApvAJtDPOXud5CTC.2R8X1skXEYErXucXFAsIPGnvMEE7jiInW//thWfLzTsVn.lDog3//CwUK.TQua1"
}
#+end_example

* knife data bag show credentials database

#+BEGIN_src sh :results output
knife data bag show credentials database
#+end_src

#+RESULTS:
#+begin_example
db_password:
  cipher:         aes-256-cbc
  encrypted_data: mmvo/XDzhVeKf5J2sQr/XtgkcjNqtJsNvuyy6PX4MFmmF27a/N7ZCXv0MZrq
  X3PFy+nfYRrLsu2dyAdLSk6JCVrzPbvBW0Ddb9b00eYh8WOTW9/x444EeCaP
  cMlLdF4LYJKmqBD3dzs2aZ0ADJvMPH4Wpbh46qpleFuJsX8cFyY=

  iv:             j87GVTg0s/zQkiXHy4Deeg==

  version:        1
id:          database
#+end_example

* TODO knife data bag show credentials database

This section fails, but it took me forever to determine why and having
the output inline is great for grepping.

#+BEGIN_src sh :results output
set +e
knife data bag show credentials database --secret-file taytestnode.key --verbose --verbose
knife data bag show credentials database --secret-file taytestnode.key
knife data bag show credentials database --secret-file ~/.chef/mtm1.pem
knife data bag show credentials database --verbose
knife data bag show credentials database --verbose --verbose
set -e
#+end_src

#+RESULTS:
#+begin_example
INFO: Using configuration from /Users/demo/.chef/knife.rb
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_request
DEBUG: Signing the request as mtm1
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_request
DEBUG: Initiating GET to https://api.chef.io/organizations/streambox/data/credentials/database
DEBUG: ---- HTTP Request Header Data: ----
DEBUG: Accept: application/json
DEBUG: Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3
DEBUG: X-Ops-Server-API-Version: 1
DEBUG: X-OPS-SIGN: algorithm=sha1;version=1.1;
DEBUG: X-OPS-USERID: mtm1
DEBUG: X-OPS-TIMESTAMP: 2016-06-22T06:59:12Z
DEBUG: X-OPS-CONTENT-HASH: 2jmj7l5rSw0yVb/vlWAYkK/YBwk=
DEBUG: X-OPS-AUTHORIZATION-1: citm+p1wCQQ2SX8Y2AoSL5LaS1jFDNbOXBRGI3J1qe3dh0XokF0ZmZtbaA1A
DEBUG: X-OPS-AUTHORIZATION-2: gQxIysqa6QTD7Bo9fSuj0ItTMzF1wlck9xGoUHtHMYQDGyBS+RMf4/P8KZh+
DEBUG: X-OPS-AUTHORIZATION-3: wum5h7dPCFRXI7NHEQsmTFrIKHSjEshHmuEyxNAxpnvulWShdWivwImTClic
DEBUG: X-OPS-AUTHORIZATION-4: Ngh70YZgZ2VUSvFNpJquc2+wqU+su+WU4twng/dAxSUFsYQCc9k//aIbehbM
DEBUG: X-OPS-AUTHORIZATION-5: 8LkbywuD7Yp4470KYeB/LPh65z0de8bmHRCVj1qC6tXA6PNxq9uz+2z+c0ar
DEBUG: X-OPS-AUTHORIZATION-6: a18F+D8BSK9X9N8QCVjR49dn1eEfKMQRwl8byqzC8Q==
DEBUG: HOST: api.chef.io:443
DEBUG: X-REMOTE-REQUEST-ID: a6e65516-c7a0-47e8-b4b4-a63ee4981e76
DEBUG: ---- End HTTP Request Header Data ----
DEBUG: ---- HTTP Status and Header Data: ----
DEBUG: HTTP 1.1 200 OK
DEBUG: content-encoding: gzip
DEBUG: content-type: application/json
DEBUG: date: Wed, 22 Jun 2016 06:59:12 GMT
DEBUG: server: openresty/1.9.3.1
DEBUG: x-ops-api-info: flavor=cs;version=12.0.0;oc_erchef=12.4.2+20160205150224
DEBUG: x-ops-server-api-version: {"min_version":"0","max_version":"1","request_version":"1","response_version":"1"}
DEBUG: content-length: 280
DEBUG: connection: Close
DEBUG: ---- End HTTP Status/Header Data ----
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_response
DEBUG: Content-Length validated correctly.
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_response
DEBUG: Decompressing gzip response
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_request
DEBUG: Signing the request as mtm1
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_request
DEBUG: Initiating GET to https://api.chef.io/organizations/streambox/data/credentials/database
DEBUG: ---- HTTP Request Header Data: ----
DEBUG: Accept: application/json
DEBUG: Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3
DEBUG: X-Ops-Server-API-Version: 1
DEBUG: X-OPS-SIGN: algorithm=sha1;version=1.1;
DEBUG: X-OPS-USERID: mtm1
DEBUG: X-OPS-TIMESTAMP: 2016-06-22T06:59:12Z
DEBUG: X-OPS-CONTENT-HASH: 2jmj7l5rSw0yVb/vlWAYkK/YBwk=
DEBUG: X-OPS-AUTHORIZATION-1: citm+p1wCQQ2SX8Y2AoSL5LaS1jFDNbOXBRGI3J1qe3dh0XokF0ZmZtbaA1A
DEBUG: X-OPS-AUTHORIZATION-2: gQxIysqa6QTD7Bo9fSuj0ItTMzF1wlck9xGoUHtHMYQDGyBS+RMf4/P8KZh+
DEBUG: X-OPS-AUTHORIZATION-3: wum5h7dPCFRXI7NHEQsmTFrIKHSjEshHmuEyxNAxpnvulWShdWivwImTClic
DEBUG: X-OPS-AUTHORIZATION-4: Ngh70YZgZ2VUSvFNpJquc2+wqU+su+WU4twng/dAxSUFsYQCc9k//aIbehbM
DEBUG: X-OPS-AUTHORIZATION-5: 8LkbywuD7Yp4470KYeB/LPh65z0de8bmHRCVj1qC6tXA6PNxq9uz+2z+c0ar
DEBUG: X-OPS-AUTHORIZATION-6: a18F+D8BSK9X9N8QCVjR49dn1eEfKMQRwl8byqzC8Q==
DEBUG: HOST: api.chef.io:443
DEBUG: X-REMOTE-REQUEST-ID: a6e65516-c7a0-47e8-b4b4-a63ee4981e76
DEBUG: ---- End HTTP Request Header Data ----
DEBUG: ---- HTTP Status and Header Data: ----
DEBUG: HTTP 1.1 200 OK
DEBUG: content-encoding: gzip
DEBUG: content-type: application/json
DEBUG: date: Wed, 22 Jun 2016 06:59:12 GMT
DEBUG: server: openresty/1.9.3.1
DEBUG: x-ops-api-info: flavor=cs;version=12.0.0;oc_erchef=12.4.2+20160205150224
DEBUG: x-ops-server-api-version: {"min_version":"0","max_version":"1","request_version":"1","response_version":"1"}
DEBUG: content-length: 280
DEBUG: connection: Close
DEBUG: ---- End HTTP Status/Header Data ----
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_response
DEBUG: Content-Length validated correctly.
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_response
DEBUG: Decompressing gzip response
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_response
INFO: Using configuration from /Users/demo/.chef/knife.rb
db_password:
  cipher:         aes-256-cbc
  encrypted_data: mmvo/XDzhVeKf5J2sQr/XtgkcjNqtJsNvuyy6PX4MFmmF27a/N7ZCXv0MZrq
  X3PFy+nfYRrLsu2dyAdLSk6JCVrzPbvBW0Ddb9b00eYh8WOTW9/x444EeCaP
  cMlLdF4LYJKmqBD3dzs2aZ0ADJvMPH4Wpbh46qpleFuJsX8cFyY=

  iv:             j87GVTg0s/zQkiXHy4Deeg==

  version:        1
id:          database
INFO: Using configuration from /Users/demo/.chef/knife.rb
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_request
DEBUG: Signing the request as mtm1
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_request
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_request
DEBUG: Initiating GET to https://api.chef.io/organizations/streambox/data/credentials/database
DEBUG: ---- HTTP Request Header Data: ----
DEBUG: Accept: application/json
DEBUG: Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3
DEBUG: X-Ops-Server-API-Version: 1
DEBUG: X-OPS-SIGN: algorithm=sha1;version=1.1;
DEBUG: X-OPS-USERID: mtm1
DEBUG: X-OPS-TIMESTAMP: 2016-06-22T06:59:18Z
DEBUG: X-OPS-CONTENT-HASH: 2jmj7l5rSw0yVb/vlWAYkK/YBwk=
DEBUG: X-OPS-AUTHORIZATION-1: A19kFqF6LDGFfBhRKtu4yx7PsbxgKbHv/J0fHEGyqK9895Pvs+jKpZv6wDz3
DEBUG: X-OPS-AUTHORIZATION-2: 2YO2aSl3ZUrfYHkIOdjcD4ZZ/9n3JC3bOgQ5FXwWtdgxedtuCQBrDmYmaDPO
DEBUG: X-OPS-AUTHORIZATION-3: 5ZbFPm7C2JgJC/AUYOGFt/nrMO3vR5JtcP9VmH86zXd/sfLILQld+7y4grEB
DEBUG: X-OPS-AUTHORIZATION-4: dtGJ6CVQ+/f3INShaQVBg8qmF1tHuCpFDxjYMrNqVYkqjEYnOtCLz2mt57zJ
DEBUG: X-OPS-AUTHORIZATION-5: tCBQFnVoh7xnuGkSLPrK56L9axcO8+hNEvMwprhVmj1lyXVvXOl6qBs9DmTz
DEBUG: X-OPS-AUTHORIZATION-6: 5qIlbsax5Vwajq/TcDUWaUg4Gw1gp9OnAX62AETPvw==
DEBUG: HOST: api.chef.io:443
DEBUG: X-REMOTE-REQUEST-ID: f0d4b001-67e0-4703-8dec-fde860c303a8
DEBUG: ---- End HTTP Request Header Data ----
DEBUG: ---- HTTP Status and Header Data: ----
DEBUG: HTTP 1.1 200 OK
DEBUG: content-encoding: gzip
DEBUG: content-type: application/json
DEBUG: date: Wed, 22 Jun 2016 06:59:19 GMT
DEBUG: server: openresty/1.9.3.1
DEBUG: x-ops-api-info: flavor=cs;version=12.0.0;oc_erchef=12.4.2+20160205150224
DEBUG: x-ops-server-api-version: {"min_version":"0","max_version":"1","request_version":"1","response_version":"1"}
DEBUG: content-length: 280
DEBUG: connection: Close
DEBUG: ---- End HTTP Status/Header Data ----
DEBUG: Chef::HTTP calling Chef::HTTP::ValidateContentLength#handle_response
DEBUG: Content-Length validated correctly.
DEBUG: Chef::HTTP calling Chef::HTTP::RemoteRequestID#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Authenticator#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::Decompressor#handle_response
DEBUG: Decompressing gzip response
DEBUG: Chef::HTTP calling Chef::HTTP::CookieManager#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONOutput#handle_response
DEBUG: Chef::HTTP calling Chef::HTTP::JSONInput#handle_response
db_password:
  cipher:         aes-256-cbc
  encrypted_data: mmvo/XDzhVeKf5J2sQr/XtgkcjNqtJsNvuyy6PX4MFmmF27a/N7ZCXv0MZrq
  X3PFy+nfYRrLsu2dyAdLSk6JCVrzPbvBW0Ddb9b00eYh8WOTW9/x444EeCaP
  cMlLdF4LYJKmqBD3dzs2aZ0ADJvMPH4Wpbh46qpleFuJsX8cFyY=

  iv:             j87GVTg0s/zQkiXHy4Deeg==

  version:        1
id:          database
#+end_example
